
use crate::parse::{self, TErrorRecovery};
use crate::parse::ast;
use crate::token::{Token};

grammar<'input, 'err>(errors: &'err mut Vec<TErrorRecovery<'input>>);

// Utils

SingleComma: () = {
    "," => (),
    <!> => errors.push(<>)
};

Sep<Rule, Separator>: Vec<Rule> =
    <rules: (<Rule> Separator)*> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };

Comma<Rule>: Vec<Rule> = {
    Sep<Rule, SingleComma>
};

// Program grammar

pub Program: ast::Program = {
    <Expression*> => ast::Program(<>.into())
};

Integer: ast::Literal = "int literal" => ast::Literal::Int(<>);
Float: ast::Literal = "float literal" => ast::Literal::Float(<>.into());

String: ast::Literal = "str literal" => ast::Literal::String(<>.into());
Char: ast::Literal = "char literal" => ast::Literal::Char(<>);

Literal = {
    Integer,
    Float,
    String,
    Char
};


Ident: ast::Expression = {
    "ident" => ast::Expression::Ident(<>.into())
};

Expression: ast::Expression = {
    Literal => ast::Expression::Literal(<>),
    Ident,
    FunctionDef,
    FunctionCall,
};

FunctionDef: ast::Expression = {
    "func" <id:"ident"> "(" <params: Comma<Ident>> ")" "{" <body:Expression*> "}" => ast::Expression::FunctionDef {
        name: id.into(),
        params,
        body,
    }
};

FunctionCall: ast::Expression = {
    <id:"ident"> "(" <args: Comma<Expression>> ")" => ast::Expression::FunctionCall {
        ident: id.into(),
        args,
    }
};


extern {
    type Location = usize;
    type Error = parse::Error;

    enum Token<'input> {
        "ident" => Token::Ident(<&'input str>),
        "str literal" => Token::StringLit(<&'input str>),
        "char literal" => Token::Char(<char>),
        "int literal" => Token::Integer(<i64>),
        "float literal" => Token::Float(<f64>),

        "let" => Token::Let,
        "func" => Token::Func,
        "struct" => Token::Struct,
        "enum" => Token::Enum,
        "type" => Token::Type,

        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "<" => Token::LAngleBracket,
        ">" => Token::RAngleBracket,

        "->" => Token::Arrow,
        "::" => Token::DoubleColon,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "," => Token::Comma,
        "=" => Token::Equal,
        "?" => Token::Question,
        "!" => Token::Bang,
        "~" => Token::Tilde,
        "@" => Token::At,
        "#" => Token::Hash,
        "$" => Token::Dollar,
        "%" => Token::Percent,
        "^" => Token::Carrot,
        "&" => Token::Ampersand,
        "*" => Token::Star,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "/" => Token::Slash,
        "\\" => Token::BackSlash,
        "|" => Token::Pipe,
        "_" => Token::Underscore,
    }
}
